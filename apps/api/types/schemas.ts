// Generated by ts-to-zod
import { z } from 'zod';

const PortfolioItemSchema = z.object({
  Yes: z.object({ shares: z.number() }).optional(),
  No: z.object({ shares: z.number() }).optional(),
});

const PortfolioDataSchema = z.preprocess((arg) => {
  if (typeof arg === 'string') {
    try {
      return JSON.parse(arg);
    } catch {
      return arg;
    }
  }
  return arg;
}, z.record(PortfolioItemSchema));

export const jsonSchema = z
  .union([
    z.string(),
    z.number(),
    z.boolean(),
    z.record(z.unknown()),
    z.array(z.unknown()),
  ])
  .nullable();

export const activitiesRowSchema = z.object({
  asset_ticker: z.string(),
  asset_uri: z.string().nullable(),
  chain: z.string(),
  chain_id: z.number().nullable(),
  created_at: z.string(),
  ens: z.string().nullable(),
  id: z.number(),
  market_address: z.string(),
  market_title: z.string(),
  market_uri: z.string().nullable(),
  outcome_index: z.number(),
  outcome_index_formatted: z.string().nullable(),
  pfp: z.string().nullable(),
  provider: z.string().nullable(),
  strategy: z.string(),
  tx_hash: z.string(),
  tx_value: z.string(),
  user_address: z.string(),
});

export const activitiesInsertSchema = z.object({
  asset_ticker: z.string(),
  asset_uri: z.string().optional().nullable(),
  chain: z.string(),
  chain_id: z.number().optional().nullable(),
  created_at: z.string().optional(),
  ens: z.string().optional().nullable(),
  id: z.number().optional(),
  market_address: z.string(),
  market_title: z.string(),
  market_uri: z.string().optional().nullable(),
  outcome_index: z.number(),
  outcome_index_formatted: z.string().optional().nullable(),
  pfp: z.string().optional().nullable(),
  provider: z.string().optional().nullable(),
  strategy: z.string(),
  tx_hash: z.string(),
  tx_value: z.string(),
  user_address: z.string(),
});

export const positionInsertSchema = z.object({
  id: z.optional(z.number()),
  createdAt: z.optional(z.string()),
  marketId: z.string(),
  // amount,
  position: z.literal(0).or(z.literal(1)),
  shares: z.number(),
  provider: z.literal('polymarket').or(z.literal('limitless')).or(z.literal('custom')),
  userId: z.string(),
  eventId: z.string().nullable(),
});

export const activitiesUpdateSchema = z.object({
  asset_ticker: z.string().optional(),
  asset_uri: z.string().optional().nullable(),
  chain: z.string().optional(),
  chain_id: z.number().optional().nullable(),
  created_at: z.string().optional(),
  ens: z.string().optional().nullable(),
  id: z.number().optional(),
  market_address: z.string().optional(),
  market_title: z.string().optional(),
  market_uri: z.string().optional().nullable(),
  outcome_index: z.number().optional(),
  outcome_index_formatted: z.string().optional().nullable(),
  pfp: z.string().optional().nullable(),
  provider: z.string().optional().nullable(),
  strategy: z.string().optional(),
  tx_hash: z.string().optional(),
  tx_value: z.string().optional(),
  user_address: z.string().optional(),
});

export const activitiesRelationshipsSchema = z.tuple([]);

export const betsRowSchema = z.object({
  active: z.boolean(),
  address: z.string(),
  amount: z.number(),
  created_at: z.string(),
  id: z.string(),
  position: z.string().nullable(),
  price: z.number(),
  userId: z.string(),
});

export const betsInsertSchema = z.object({
  active: z.boolean().optional(),
  address: z.string(),
  amount: z.number().optional(),
  created_at: z.string().optional(),
  id: z.string().optional(),
  position: z.string().optional().nullable(),
  price: z.number(),
  userId: z.string(),
});

export const betsUpdateSchema = z.object({
  active: z.boolean().optional(),
  address: z.string().optional(),
  amount: z.number().optional(),
  created_at: z.string().optional(),
  id: z.string().optional(),
  position: z.string().optional().nullable(),
  price: z.number().optional(),
  userId: z.string().optional(),
});

export const betsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal('bets_userId_fkey'),
    columns: z.tuple([z.literal('userId')]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal('temp_player'),
    referencedColumns: z.tuple([z.literal('userId')]),
  }),
]);

export const marketsRowSchema = z.object({
  address: z.string(),
  chainId: z.string(),
  createdAt: z.string(),
  expirationDate: z.string().nullable(),
  outcomeTokens: z.array(z.string()).nullable(),
  title: z.string(),
});

export const marketsInsertSchema = z.object({
  address: z.string(),
  chainId: z.string(),
  createdAt: z.string().optional(),
  expirationDate: z.string().optional().nullable(),
  outcomeTokens: z.array(z.string()).optional().nullable(),
  title: z.string(),
});

export const marketsUpdateSchema = z.object({
  address: z.string().optional(),
  chainId: z.string().optional(),
  createdAt: z.string().optional(),
  expirationDate: z.string().optional().nullable(),
  outcomeTokens: z.array(z.string()).optional().nullable(),
  title: z.string().optional(),
});

export const marketsRelationshipsSchema = z.tuple([]);

export const tempPlayerRowSchema = z.object({
  balance: z.number(),
  claimed: z.boolean().nullable(),
  created_at: z.string(),
  points: z.number(),
  portfolio: PortfolioDataSchema.nullable(),
  updated_at: z.string().nullable(),
  userId: z.string(),
  uuid: z.string(),
});

export const tempPlayerInsertSchema = z.object({
  balance: z.number(),
  claimed: z.boolean().optional().nullable(),
  created_at: z.string().optional(),
  points: z.number().optional(),
  portfolio: PortfolioDataSchema.optional().nullable(),
  updated_at: z.string().optional().nullable(),
  userId: z.string(),
  uuid: z.string().optional(),
});

export const tempPlayerUpdateSchema = z.object({
  balance: z.number().optional(),
  claimed: z.boolean().optional().nullable(),
  created_at: z.string().optional(),
  points: z.number().optional(),
  portfolio: PortfolioDataSchema.optional().nullable(),
  updated_at: z.string().optional().nullable(),
  userId: z.string().optional(),
  uuid: z.string().optional(),
});

export const tempPlayerRelationshipsSchema = z.tuple([]);
